# WARNING: This file is automatically generated. Do not edit directly.
# Instead, modify the flake.nix.tpl file and run the update script.

{
  description = "KCL toolchain flake";

  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs/nixos-unstable";
    flake-utils.url = "github:numtide/flake-utils";
  };

  outputs = { self, nixpkgs, flake-utils }:
    flake-utils.lib.eachDefaultSystem (system:
      let
        pkgs = import nixpkgs { inherit system; };

        getArch = system:
          if system == "x86_64-linux" then "linux-amd64"
          else if system == "aarch64-linux" then "linux-arm64"
          else if system == "x86_64-darwin" then "darwin-amd64"
          else if system == "aarch64-darwin" then "darwin-arm64"
          else throw "Unsupported system: ${system}";

        cli = pkgs.stdenv.mkDerivation rec {
          pname = "kcl-cli";
          version = "0.10.0";

          src = pkgs.fetchurl {
            url = "https://github.com/kcl-lang/cli/releases/download/v${version}/kcl-v${version}-${getArch system}.tar.gz";
            sha256 = {
              x86_64-linux = "16pg6h7hzr8ym2fzxvx2ifdylw7zwh3gb0gaxwgimy6ym08xydkg";
              aarch64-linux = "10jqpjpr1c157j57lkjdazlz44grmb1nbyx8jy0p8bh4ashdxm4i";
              x86_64-darwin = "0mkf18kjnzym4fv5xz9ag1b0kj972kyxf2q9iawblqvw0gv0mdy1";
              aarch64-darwin = "00jyhy5l69hzdxyidknl2bmhyv1i5pj0n6dv0kihgamad8318fjq";
            }.${system};
          };

          dontUnpack = true;

          installPhase = ''
            mkdir -p $out/bin
            tar -xzf $src -C $out/bin
            # Ensure the file is named 'kcl'
            if [ ! -f $out/bin/kcl ]; then
              mv $out/bin/kcl-cli $out/bin/kcl || true
            fi
            chmod +x $out/bin/kcl
          '';
        };

        language-server = pkgs.stdenv.mkDerivation rec {
          pname = "kcl-language-server";
          version = "0.10.0";

          src = pkgs.fetchurl {
            url = "https://github.com/kcl-lang/kcl/releases/download/v${version}/kclvm-v${version}-${getArch system}.tar.gz";
            sha256 = {
              x86_64-linux = "17yn98dy28ayappgfplkvpf73aj96hzk3p4x66rsr7x37rv3j4vx";
              aarch64-linux = "1wd5wigxq6w16hy88cqn1abg8wk5gnmiccfq4ckdwr3z3vmgxpcp";
              x86_64-darwin = "1dn6wlr48c78a5f9h1wjg0ww533k9mxmz6zi5xkp3dy0is75cx6m";
              aarch64-darwin = "1vsx8lr3nrwl5zrrdrn3y62m8sp1cgbpjl2smj3cmfjaijsx7kmy";
            }.${system};
          };

          installPhase = ''
            mkdir -p $out/bin
            cp bin/kcl-language-server $out/bin/
          '';
        };

        getArchKubectlKcl = system:
          if system == "x86_64-linux" then "linux-amd64"
          else if system == "aarch64-linux" then "linux-arm64"
          else if system == "x86_64-darwin" then "macos-amd64"
          else if system == "aarch64-darwin" then "macos-arm64"
          else throw "Unsupported system: ${system}";

        kubectl-kcl = pkgs.stdenv.mkDerivation rec {
          pname = "kubectl-kcl";
          version = "0.9.0";

          src = pkgs.fetchurl {
            url = "https://github.com/kcl-lang/kubectl-kcl/releases/download/v${version}/kubectl-kcl-${getArchKubectlKcl system}.tgz";
            sha256 = {
              x86_64-linux = "1242dvx9ph52yxq988n0fvsbm9wpchi4pwpwj2zbscw1hgy0apq8";
              aarch64-linux = "1d0yby7niw7npp5v5f91q20g2z4flnzkp6ydhc0sjwls3lwrj8g9";
              x86_64-darwin = "1qyrmfwabz0aa3bavjrijmq21gk1marks6b1k2vg1vy68z68pll7";
              aarch64-darwin = "1vz529yi5dz0wi0ymbg3q52ixqdfzv9czk8iwp94q5ffjqcvdf9j";
            }.${system};
          };

          installPhase = ''
            mkdir -p $out/bin
            cp bin/kubectl-kcl $out/bin/
          '';
        };

      in
      {
        default = {
          inherit cli language-server kubectl-kcl;
        };
      }
    );
}
